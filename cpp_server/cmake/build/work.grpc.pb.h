// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: work.proto
#ifndef GRPC_work_2eproto__INCLUDED
#define GRPC_work_2eproto__INCLUDED

#include "work.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace work {

class Work final {
 public:
  static constexpr char const* service_full_name() {
    return "work.Work";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::work::User>> GetUser(::grpc::ClientContext* context, const ::work::GetUserRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::work::User>>(GetUserRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::work::User>> AsyncGetUser(::grpc::ClientContext* context, const ::work::GetUserRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::work::User>>(AsyncGetUserRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::work::User>> PrepareAsyncGetUser(::grpc::ClientContext* context, const ::work::GetUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::work::User>>(PrepareAsyncGetUserRaw(context, request, cq));
    }
    virtual ::grpc::Status addUser(::grpc::ClientContext* context, const ::work::User& request, ::work::GetUserResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::work::GetUserResponse>> AsyncaddUser(::grpc::ClientContext* context, const ::work::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::work::GetUserResponse>>(AsyncaddUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::work::GetUserResponse>> PrepareAsyncaddUser(::grpc::ClientContext* context, const ::work::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::work::GetUserResponse>>(PrepareAsyncaddUserRaw(context, request, cq));
    }
    virtual ::grpc::Status deleteUser(::grpc::ClientContext* context, const ::work::User& request, ::work::GetUserResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::work::GetUserResponse>> AsyncdeleteUser(::grpc::ClientContext* context, const ::work::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::work::GetUserResponse>>(AsyncdeleteUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::work::GetUserResponse>> PrepareAsyncdeleteUser(::grpc::ClientContext* context, const ::work::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::work::GetUserResponse>>(PrepareAsyncdeleteUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::work::User>> findUser(::grpc::ClientContext* context, const ::work::User& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::work::User>>(findUserRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::work::User>> AsyncfindUser(::grpc::ClientContext* context, const ::work::User& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::work::User>>(AsyncfindUserRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::work::User>> PrepareAsyncfindUser(::grpc::ClientContext* context, const ::work::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::work::User>>(PrepareAsyncfindUserRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetUser(::grpc::ClientContext* context, const ::work::GetUserRequest* request, ::grpc::ClientReadReactor< ::work::User>* reactor) = 0;
      virtual void addUser(::grpc::ClientContext* context, const ::work::User* request, ::work::GetUserResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void addUser(::grpc::ClientContext* context, const ::work::User* request, ::work::GetUserResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void deleteUser(::grpc::ClientContext* context, const ::work::User* request, ::work::GetUserResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void deleteUser(::grpc::ClientContext* context, const ::work::User* request, ::work::GetUserResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void findUser(::grpc::ClientContext* context, const ::work::User* request, ::grpc::ClientReadReactor< ::work::User>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderInterface< ::work::User>* GetUserRaw(::grpc::ClientContext* context, const ::work::GetUserRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::work::User>* AsyncGetUserRaw(::grpc::ClientContext* context, const ::work::GetUserRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::work::User>* PrepareAsyncGetUserRaw(::grpc::ClientContext* context, const ::work::GetUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::work::GetUserResponse>* AsyncaddUserRaw(::grpc::ClientContext* context, const ::work::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::work::GetUserResponse>* PrepareAsyncaddUserRaw(::grpc::ClientContext* context, const ::work::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::work::GetUserResponse>* AsyncdeleteUserRaw(::grpc::ClientContext* context, const ::work::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::work::GetUserResponse>* PrepareAsyncdeleteUserRaw(::grpc::ClientContext* context, const ::work::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::work::User>* findUserRaw(::grpc::ClientContext* context, const ::work::User& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::work::User>* AsyncfindUserRaw(::grpc::ClientContext* context, const ::work::User& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::work::User>* PrepareAsyncfindUserRaw(::grpc::ClientContext* context, const ::work::User& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReader< ::work::User>> GetUser(::grpc::ClientContext* context, const ::work::GetUserRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::work::User>>(GetUserRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::work::User>> AsyncGetUser(::grpc::ClientContext* context, const ::work::GetUserRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::work::User>>(AsyncGetUserRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::work::User>> PrepareAsyncGetUser(::grpc::ClientContext* context, const ::work::GetUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::work::User>>(PrepareAsyncGetUserRaw(context, request, cq));
    }
    ::grpc::Status addUser(::grpc::ClientContext* context, const ::work::User& request, ::work::GetUserResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::work::GetUserResponse>> AsyncaddUser(::grpc::ClientContext* context, const ::work::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::work::GetUserResponse>>(AsyncaddUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::work::GetUserResponse>> PrepareAsyncaddUser(::grpc::ClientContext* context, const ::work::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::work::GetUserResponse>>(PrepareAsyncaddUserRaw(context, request, cq));
    }
    ::grpc::Status deleteUser(::grpc::ClientContext* context, const ::work::User& request, ::work::GetUserResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::work::GetUserResponse>> AsyncdeleteUser(::grpc::ClientContext* context, const ::work::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::work::GetUserResponse>>(AsyncdeleteUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::work::GetUserResponse>> PrepareAsyncdeleteUser(::grpc::ClientContext* context, const ::work::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::work::GetUserResponse>>(PrepareAsyncdeleteUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::work::User>> findUser(::grpc::ClientContext* context, const ::work::User& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::work::User>>(findUserRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::work::User>> AsyncfindUser(::grpc::ClientContext* context, const ::work::User& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::work::User>>(AsyncfindUserRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::work::User>> PrepareAsyncfindUser(::grpc::ClientContext* context, const ::work::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::work::User>>(PrepareAsyncfindUserRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetUser(::grpc::ClientContext* context, const ::work::GetUserRequest* request, ::grpc::ClientReadReactor< ::work::User>* reactor) override;
      void addUser(::grpc::ClientContext* context, const ::work::User* request, ::work::GetUserResponse* response, std::function<void(::grpc::Status)>) override;
      void addUser(::grpc::ClientContext* context, const ::work::User* request, ::work::GetUserResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void deleteUser(::grpc::ClientContext* context, const ::work::User* request, ::work::GetUserResponse* response, std::function<void(::grpc::Status)>) override;
      void deleteUser(::grpc::ClientContext* context, const ::work::User* request, ::work::GetUserResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void findUser(::grpc::ClientContext* context, const ::work::User* request, ::grpc::ClientReadReactor< ::work::User>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReader< ::work::User>* GetUserRaw(::grpc::ClientContext* context, const ::work::GetUserRequest& request) override;
    ::grpc::ClientAsyncReader< ::work::User>* AsyncGetUserRaw(::grpc::ClientContext* context, const ::work::GetUserRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::work::User>* PrepareAsyncGetUserRaw(::grpc::ClientContext* context, const ::work::GetUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::work::GetUserResponse>* AsyncaddUserRaw(::grpc::ClientContext* context, const ::work::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::work::GetUserResponse>* PrepareAsyncaddUserRaw(::grpc::ClientContext* context, const ::work::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::work::GetUserResponse>* AsyncdeleteUserRaw(::grpc::ClientContext* context, const ::work::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::work::GetUserResponse>* PrepareAsyncdeleteUserRaw(::grpc::ClientContext* context, const ::work::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::work::User>* findUserRaw(::grpc::ClientContext* context, const ::work::User& request) override;
    ::grpc::ClientAsyncReader< ::work::User>* AsyncfindUserRaw(::grpc::ClientContext* context, const ::work::User& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::work::User>* PrepareAsyncfindUserRaw(::grpc::ClientContext* context, const ::work::User& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetUser_;
    const ::grpc::internal::RpcMethod rpcmethod_addUser_;
    const ::grpc::internal::RpcMethod rpcmethod_deleteUser_;
    const ::grpc::internal::RpcMethod rpcmethod_findUser_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetUser(::grpc::ServerContext* context, const ::work::GetUserRequest* request, ::grpc::ServerWriter< ::work::User>* writer);
    virtual ::grpc::Status addUser(::grpc::ServerContext* context, const ::work::User* request, ::work::GetUserResponse* response);
    virtual ::grpc::Status deleteUser(::grpc::ServerContext* context, const ::work::User* request, ::work::GetUserResponse* response);
    virtual ::grpc::Status findUser(::grpc::ServerContext* context, const ::work::User* request, ::grpc::ServerWriter< ::work::User>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetUser() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUser(::grpc::ServerContext* /*context*/, const ::work::GetUserRequest* /*request*/, ::grpc::ServerWriter< ::work::User>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUser(::grpc::ServerContext* context, ::work::GetUserRequest* request, ::grpc::ServerAsyncWriter< ::work::User>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_addUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_addUser() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_addUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addUser(::grpc::ServerContext* /*context*/, const ::work::User* /*request*/, ::work::GetUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddUser(::grpc::ServerContext* context, ::work::User* request, ::grpc::ServerAsyncResponseWriter< ::work::GetUserResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_deleteUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_deleteUser() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_deleteUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteUser(::grpc::ServerContext* /*context*/, const ::work::User* /*request*/, ::work::GetUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdeleteUser(::grpc::ServerContext* context, ::work::User* request, ::grpc::ServerAsyncResponseWriter< ::work::GetUserResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_findUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_findUser() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_findUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status findUser(::grpc::ServerContext* /*context*/, const ::work::User* /*request*/, ::grpc::ServerWriter< ::work::User>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestfindUser(::grpc::ServerContext* context, ::work::User* request, ::grpc::ServerAsyncWriter< ::work::User>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetUser<WithAsyncMethod_addUser<WithAsyncMethod_deleteUser<WithAsyncMethod_findUser<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetUser() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::work::GetUserRequest, ::work::User>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::work::GetUserRequest* request) { return this->GetUser(context, request); }));
    }
    ~WithCallbackMethod_GetUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUser(::grpc::ServerContext* /*context*/, const ::work::GetUserRequest* /*request*/, ::grpc::ServerWriter< ::work::User>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::work::User>* GetUser(
      ::grpc::CallbackServerContext* /*context*/, const ::work::GetUserRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_addUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_addUser() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::work::User, ::work::GetUserResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::work::User* request, ::work::GetUserResponse* response) { return this->addUser(context, request, response); }));}
    void SetMessageAllocatorFor_addUser(
        ::grpc::MessageAllocator< ::work::User, ::work::GetUserResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::work::User, ::work::GetUserResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_addUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addUser(::grpc::ServerContext* /*context*/, const ::work::User* /*request*/, ::work::GetUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* addUser(
      ::grpc::CallbackServerContext* /*context*/, const ::work::User* /*request*/, ::work::GetUserResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_deleteUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_deleteUser() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::work::User, ::work::GetUserResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::work::User* request, ::work::GetUserResponse* response) { return this->deleteUser(context, request, response); }));}
    void SetMessageAllocatorFor_deleteUser(
        ::grpc::MessageAllocator< ::work::User, ::work::GetUserResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::work::User, ::work::GetUserResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_deleteUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteUser(::grpc::ServerContext* /*context*/, const ::work::User* /*request*/, ::work::GetUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* deleteUser(
      ::grpc::CallbackServerContext* /*context*/, const ::work::User* /*request*/, ::work::GetUserResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_findUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_findUser() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::work::User, ::work::User>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::work::User* request) { return this->findUser(context, request); }));
    }
    ~WithCallbackMethod_findUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status findUser(::grpc::ServerContext* /*context*/, const ::work::User* /*request*/, ::grpc::ServerWriter< ::work::User>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::work::User>* findUser(
      ::grpc::CallbackServerContext* /*context*/, const ::work::User* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetUser<WithCallbackMethod_addUser<WithCallbackMethod_deleteUser<WithCallbackMethod_findUser<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetUser() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUser(::grpc::ServerContext* /*context*/, const ::work::GetUserRequest* /*request*/, ::grpc::ServerWriter< ::work::User>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_addUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_addUser() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_addUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addUser(::grpc::ServerContext* /*context*/, const ::work::User* /*request*/, ::work::GetUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_deleteUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_deleteUser() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_deleteUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteUser(::grpc::ServerContext* /*context*/, const ::work::User* /*request*/, ::work::GetUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_findUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_findUser() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_findUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status findUser(::grpc::ServerContext* /*context*/, const ::work::User* /*request*/, ::grpc::ServerWriter< ::work::User>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetUser() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUser(::grpc::ServerContext* /*context*/, const ::work::GetUserRequest* /*request*/, ::grpc::ServerWriter< ::work::User>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_addUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_addUser() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_addUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addUser(::grpc::ServerContext* /*context*/, const ::work::User* /*request*/, ::work::GetUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_deleteUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_deleteUser() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_deleteUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteUser(::grpc::ServerContext* /*context*/, const ::work::User* /*request*/, ::work::GetUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdeleteUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_findUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_findUser() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_findUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status findUser(::grpc::ServerContext* /*context*/, const ::work::User* /*request*/, ::grpc::ServerWriter< ::work::User>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestfindUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetUser() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetUser(context, request); }));
    }
    ~WithRawCallbackMethod_GetUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUser(::grpc::ServerContext* /*context*/, const ::work::GetUserRequest* /*request*/, ::grpc::ServerWriter< ::work::User>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_addUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_addUser() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->addUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_addUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addUser(::grpc::ServerContext* /*context*/, const ::work::User* /*request*/, ::work::GetUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* addUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_deleteUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_deleteUser() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->deleteUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_deleteUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteUser(::grpc::ServerContext* /*context*/, const ::work::User* /*request*/, ::work::GetUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* deleteUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_findUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_findUser() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->findUser(context, request); }));
    }
    ~WithRawCallbackMethod_findUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status findUser(::grpc::ServerContext* /*context*/, const ::work::User* /*request*/, ::grpc::ServerWriter< ::work::User>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* findUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_addUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_addUser() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::work::User, ::work::GetUserResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::work::User, ::work::GetUserResponse>* streamer) {
                       return this->StreamedaddUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_addUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status addUser(::grpc::ServerContext* /*context*/, const ::work::User* /*request*/, ::work::GetUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedaddUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::work::User,::work::GetUserResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_deleteUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_deleteUser() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::work::User, ::work::GetUserResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::work::User, ::work::GetUserResponse>* streamer) {
                       return this->StreameddeleteUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_deleteUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status deleteUser(::grpc::ServerContext* /*context*/, const ::work::User* /*request*/, ::work::GetUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameddeleteUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::work::User,::work::GetUserResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_addUser<WithStreamedUnaryMethod_deleteUser<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetUser() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::work::GetUserRequest, ::work::User>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::work::GetUserRequest, ::work::User>* streamer) {
                       return this->StreamedGetUser(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetUser(::grpc::ServerContext* /*context*/, const ::work::GetUserRequest* /*request*/, ::grpc::ServerWriter< ::work::User>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetUser(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::work::GetUserRequest,::work::User>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_findUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_findUser() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::work::User, ::work::User>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::work::User, ::work::User>* streamer) {
                       return this->StreamedfindUser(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_findUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status findUser(::grpc::ServerContext* /*context*/, const ::work::User* /*request*/, ::grpc::ServerWriter< ::work::User>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedfindUser(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::work::User,::work::User>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetUser<WithSplitStreamingMethod_findUser<Service > > SplitStreamedService;
  typedef WithSplitStreamingMethod_GetUser<WithStreamedUnaryMethod_addUser<WithStreamedUnaryMethod_deleteUser<WithSplitStreamingMethod_findUser<Service > > > > StreamedService;
};

}  // namespace work


#endif  // GRPC_work_2eproto__INCLUDED
